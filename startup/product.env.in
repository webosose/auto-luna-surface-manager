# Copyright (c) 2018-2022 LG Electronics, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

# Avoid waiting for coalescing touch events in QQuickWindow
export QML_NO_TOUCH_COMPRESSION=1

# Set atlas texture size to 1MB (512 * 512 * 4)
export QSG_ATLAS_WIDTH=512
export QSG_ATLAS_HEIGHT=512

# QSG_TRANSIENT_IMAGES is not working as expected in multiple windows
unset QSG_TRANSIENT_IMAGES

# Keymap
export QT_QPA_EVDEV_KEYBOARD_PARAMETERS=keymap=@WEBOS_INSTALL_DATADIR@/webos-keymap/webos-keymap.qmap

# Define the compositor plugin to be used
export WEBOS_COMPOSITOR_PLUGIN="webosautocompositorplugin"

# Define the compositor extensions that will be loaded
export WEBOS_COMPOSITOR_EXTENSIONS=

# Use dma-buf as additional buffer interface
export QT_WAYLAND_HARDWARE_INTEGRATION=linux-dmabuf-unstable-v1

# Platform plugin to be used
export WEBOS_COMPOSITOR_PLATFORM="eglfs_webos"
export QT_QPA_EGLFS_INTEGRATION="eglfs_kms_webos"

# Cursor timeout
export WEBOS_CURSOR_TIMEOUT=-1

# Disable keyboard output mapping
export QT_QPA_EVDEV_DISABLE_KBD_OUTPUT_MAPPING=1

# Scale factor for High DPI
export QT_SCALE_FACTOR=1.0

# Needed since Qt 5.11
export QT_QPA_EGLFS_ALWAYS_SET_MODE=1

# Use DRM Atomic or not
export QT_QPA_EGLFS_KMS_ATOMIC=0

# Needed since Qt 6.0
export QML_XHR_ALLOW_FILE_READ=1

# Apply the adaptive update option
export QT_QPA_UPDATE_IDLE_TIME=0
export WEBOS_COMPOSITOR_ADAPTIVE_UPDATE=1
export WEBOS_COMPOSITOR_ADAPTIVE_FRAME_CALLBACK=1

# Import path for WebOSCompositor
export WEBOS_COMPOSITOR_IMPORT_PATH=@WEBOS_INSTALL_QML@/WebOSCompositor/AutoRSE

# Try to get WEBOS_COMPOSITOR_DISPLAY_CONFIG from configd
WEBOS_COMPOSITOR_DISPLAY_CONFIG=$(luna-send -n 1 -a com.webos.surfacemanager luna://com.webos.service.config/getConfigs '{"configNames":["com.webos.surfacemanager.displayConfig"]}' | grep -oE "\[\{.*\}\]" || echo "x")

if [ "$WEBOS_COMPOSITOR_DISPLAY_CONFIG" == "x" ]; then
    # Display device detection
    # DRM_CONNECTORS_EXPECTED of 0 doesn't specify the number of DRM connectors
    # which means that it starts with all DRM connectors detected at this point.
    # DRM_PROBE_RETRY is valid only if DRM_CONNECTORS_EXPECTED > 0.
    # DRM_CONNECTORS_SCAN_PRIORITY is the list of connector names interested in order.
    # Use "*" to scan any connectors in alphabetical order.
    WEBOS_COMPOSITOR_DISPLAYS=0
    WEBOS_COMPOSITOR_PRIMARY_SCREEN=""
    DRM_PROBE_RETRY=10
    DRM_CONNECTORS_EXPECTED=0
    DRM_CONNECTORS_SCAN_PRIORITY="*"
    DRM_CONNECTORS_DETECTED_LIST="$XDG_RUNTIME_DIR/surface-manager.display.lst"
    pmlog info "Generating WEBOS_COMPOSITOR_DISPLAY_CONFIG based on /sys/class/drm ..."

    check_drm_connector() {
        bn=$(basename $1)
        device=${bn%%-*};    bn=${bn#$device-}
        connector=${bn%%-*}; bn=${bn#$connector-}
        sb=${bn%%-*};        bn=${bn#$sb-}
        id=${bn%%-*}
        enabled=$(cat "$1/enabled")
        status=$(cat "$1/status")
        # Assume available if it reports something other than disconnected
        # because some DRM connector doesn't report its status correctly.
        if [ "$status" == "connected" ] || [ "$connector" == "DSI" -a "$status" != "disconnected" ]; then
            pmlog info "Display device to use: $device, $connector$id"
            echo "/dev/dri/$device $connector$id $WEBOS_COMPOSITOR_GEOMETRY" >> $DRM_CONNECTORS_DETECTED_LIST
            WEBOS_COMPOSITOR_DISPLAYS=$(expr $WEBOS_COMPOSITOR_DISPLAYS + 1)
            if [ -z "$WEBOS_COMPOSITOR_PRIMARY_SCREEN" ]; then
                WEBOS_COMPOSITOR_PRIMARY_SCREEN="$connector$id"
            fi
        else
            pmlog warning "Display device unusable: $device, $connector$id ($enabled, $status)"
        fi
    }

    while true; do
        WEBOS_COMPOSITOR_DISPLAYS=0
        cat /dev/null > $DRM_CONNECTORS_DETECTED_LIST
        set -f; for k in $DRM_CONNECTORS_SCAN_PRIORITY; do
            pmlog info "Connector to scan: $k"
            set +f
            for f in $(find /sys/class/drm -name "card*-$k-*" | sort); do
                check_drm_connector $f
                if [ $DRM_CONNECTORS_EXPECTED -gt 0 -a $WEBOS_COMPOSITOR_DISPLAYS -ge $DRM_CONNECTORS_EXPECTED ]; then
                    break
                fi
            done
        done

        if [ $DRM_CONNECTORS_EXPECTED -eq 0 -a $WEBOS_COMPOSITOR_DISPLAYS -gt 0 ]; then
            pmlog info "$WEBOS_COMPOSITOR_DISPLAYS display device(s) detected."
            break
        elif [ $DRM_CONNECTORS_EXPECTED -gt 0 -a $WEBOS_COMPOSITOR_DISPLAYS -ge $DRM_CONNECTORS_EXPECTED ]; then
            pmlog info "$WEBOS_COMPOSITOR_DISPLAYS display device(s) detected as expected."
            break
        else
            # Detection incomplete.
            # TODO: Consider using inotify rather than polling.
            if [ $WEBOS_COMPOSITOR_DISPLAYS -eq 0 ]; then
                pmlog crit "No display device detected"
                # Retry until at least one connector becomes available
                sleep 10
            elif [ $DRM_PROBE_RETRY -gt 0 ]; then
                pmlog info "$WEBOS_COMPOSITOR_DISPLAYS display device(s) detected, expecting $DRM_CONNECTORS_EXPECTED"
                DRM_PROBE_RETRY=$(expr $DRM_PROBE_RETRY - 1)
                sleep 1
            else
                pmlog warning "Failed to detect $DRM_CONNECTORS_EXPECTED display device(s). Detected $WEBOS_COMPOSITOR_DISPLAYS only."
                break
            fi
        fi
    done

    WEBOS_COMPOSITOR_DISPLAY_CONFIG=$(awk '
        BEGIN {
            dri = ""
            printf "["
        }
        /^\/dev\/dri\// {
            if (dri != $1) {
                if (dri != "")
                    printf "]}"
                    if (index($2, "Virtual") == 0)
                        printf "{\"device\":\"%s\",\"hwcursor\":true,\"outputs\":[", $1
                    else
                        printf "{\"device\":\"%s\",\"hwcursor\":false,\"outputs\":[", $1
                dri = $1
            } else {
                printf ","
            }
            printf "{\"name\":\"%s\",\"geometry\":\"%s\"}", $2, $3
        }
        END {
            if (dri != "")
                printf "]}"
            printf "]"
        }
        ' $DRM_CONNECTORS_DETECTED_LIST)
fi

# Generate EGLFS config json file based on devices detected.
# Assume the order of touchscreen devices are the same with
# the order of DRM connectors.
QT_QPA_EGLFS_CONFIG="$XDG_RUNTIME_DIR/surface-manager.eglfs.json"

pmlog info "QT_QPA_EGLFS_CONFIG: $QT_QPA_EGLFS_CONFIG"
pmlog info "WEBOS_COMPOSITOR_DISPLAYS: $WEBOS_COMPOSITOR_DISPLAYS"
pmlog info "WEBOS_COMPOSITOR_PRIMARY_SCREEN: $WEBOS_COMPOSITOR_PRIMARY_SCREEN"
pmlog info "WEBOS_COMPOSITOR_DISPLAY_CONFIG: $WEBOS_COMPOSITOR_DISPLAY_CONFIG"
echo $WEBOS_COMPOSITOR_DISPLAY_CONFIG > $QT_QPA_EGLFS_CONFIG
export QT_QPA_EGLFS_CONFIG WEBOS_COMPOSITOR_DISPLAYS WEBOS_COMPOSITOR_PRIMARY_SCREEN WEBOS_COMPOSITOR_DISPLAY_CONFIG
